package com.ihtsdo.snomed.canonical.test;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.UnrecognizedOptionException;

public class CliParser {

    public void parse(String[] args, Main callback) throws IOException, ParseException{

        //Create a parser using Commons CLI
        CommandLineParser parser = new BasicParser( );
        Options options = new Options( );
        options.addOption("h", "help", false, "Print this usage information");
        options.addOption("c", "concepts", true, "Concepts input file");
        options.addOption("g", "generated", true, "Generated results file");
        options.addOption("e", "expected", true, "Expected results file");
        options.addOption("d", "database", true, "Database location");
        options.addOption("x", "extra", true, "Database location");
        options.addOption("m", "missing", true, "Database location");
        options.addOption("o", "original", true, "Original file");

        String helpString = "-g <generated input file> -e <expected input file> -c <concepts input file>" + 
        " -o <original long form input file> -x <extra output file> -m <missing output file>. Optionaly -d <database location>." + 
                "Try -h for more help";
        
        // Parse the program arguments
        CommandLine commandLine = null;
        try {
            commandLine = parser.parse(options, args);
        } catch (UnrecognizedOptionException e) {
            System.out.println("Unrecognised option. Usage is " + helpString);
            System.exit(1);
        }

        // Set the appropriate variables based on supplied options
        String concepts = commandLine.getOptionValue('c');
        String generated = commandLine.getOptionValue('g');
        String expected = commandLine.getOptionValue('e');
        String extraFile = commandLine.getOptionValue('x');
        String missingFile = commandLine.getOptionValue('m');
        String originalFile = commandLine.getOptionValue('o');
        String db = commandLine.getOptionValue('d');

        testInputs(helpString, commandLine, concepts, generated, expected, extraFile, missingFile, originalFile, db);
        callback.runProgram(concepts, expected, generated, extraFile, missingFile, originalFile, db);
    }
    
    private static void testInputs(String helpString, CommandLine commandLine,
            String concepts, String generated, String expected, String extraFile, 
            String missingFile, String original, String db) {
        if (commandLine.hasOption('h')) {
            System.out.println("-h, --help\t\tPrint this help menu\n" +
                    "-g. --generated\t\tFile containing all statements generated by algorithm\n" +
                    "-e, --expected\t\tFile containing all statements expected by algorithm\n" +
                    "-c, --concepts\t\tFile containing all the concepts referenced in the relationships file, aka 'Concepts_Core'\n" +
                    "-d, --database\t\tOptional. Specify location of database file. If not specified, \n\t\t\tdefaults to an in-memory database (minium 2Gb of heap space required)\n" +
                    "-x, --extra\t\tSpecify output file to write all the statements in generated, but not in expected\n" +
                    "-m, --missing\t\tSpecify output file to write all the statements in expected, but not in generated\n" +
                    "-o, --original\t\tFile containing the original long form relatioship statements, used to generate the canonical form");
            
            System.exit(0);
        }
        
        if ((generated == null) || (concepts == null) || (expected == null) || (extraFile == null) || 
                (missingFile == null) || (original == null) ||
                (generated.isEmpty()) || (concepts.isEmpty()) || expected.isEmpty() || 
                extraFile.isEmpty() || missingFile.isEmpty() || original.isEmpty()){
            System.out.println("Invalid parameter configuration. Usage is: " + helpString);
            System.exit(-1);
        }
        
        if (!new File(concepts).isFile()){
            System.out.println("Unable to locate concepts input file '" + concepts + "'");
            System.exit(-1);
        }
        
        if (!new File(generated).isFile()){
            System.out.println("Unable to locate generated statements input file '" + generated + "'");
            System.exit(-1);
        }
        if (!new File(expected).isFile()){
            System.out.println("Unable to locate expected statements input file '" + expected + "'");
            System.exit(-1);
        }
        if (!new File(original).isFile()){
            System.out.println("Unable to locate original input file '" + original + "'");
            System.exit(-1);
        }
        
        try {
            new FileOutputStream(new File(extraFile));
        } catch (IOException e) {
            System.out.println("Unable to write to extra output file '" + extraFile +"'. Check your permissions and path.");
            System.exit(-1);
        }
        
        try {
            new FileOutputStream(new File(missingFile));
        } catch (IOException e) {
            System.out.println("Unable to write to extra output file '" + missingFile +"'. Check your permissions and path.");
            System.exit(-1);
        }        
        
        if ((db != null) && (!db.isEmpty())){
            try {
                new FileOutputStream(new File(db));
            } catch (IOException e) {
                System.out.println("Unable to write to database file '" + db +"'. Check your permissions and path.");
                System.exit(-1);
            }
        }
    }    
}
